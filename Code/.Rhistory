),
plotOutput("heatmap_plot_multi")
)
),
fluidRow(
box(title = "Dual expression", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,height = 650,
column(width = 4,
pickerInput("gene_select_scatter_multi1", "Select Genes:", choices = NULL, options = list(`actions-box` = TRUE, `live-search` = TRUE)),
pickerInput("gene_select_scatter_multi2", "Select Genes:", choices = NULL, options = list(`actions-box` = TRUE, `live-search` = TRUE)),
),
column(width = 4,
actionButton("generateScatterMulti", "Generate Dual expression"),
textInput("text_clusters_merge_scatter", "Specify Clusters (comma-separated):", ""),
checkboxInput("select_all_clusters_merge_scatter", "Select All Clusters", TRUE)),
column(width = 4,
selectInput("dataset_select_scatter", "Group By:", choices = c("dataset", "cluster")),
numericInput("dpi_scatter_multi", "Resolution for Download:", value = 300, min = 72, step = 72),
downloadButton("download_scatter_multi", "Download Heatmap")
),
plotOutput("scatter_plot_multi")
)))
,
############################## Multiple/Assigning cell identity merge ##############################
tabItem(
tabName = "assigning_cell_type_identity_merge",
box(  title = "Assign cell type identity", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
column(width = 4,
selectInput("select_cluster_merge", "Select Cluster:", choices = NULL),
textInput("rename_single_cluster_merge", "New name for selected cluster:"),
actionButton("rename_single_cluster_merge_button", "Rename the selected cluster")
),
column(width = 4,
textInput("plot_title_merge", "Plot title:", value = "UMAP Finale Merge"),
numericInput("label_font_size_merge", "Label font size", value = 5, min = 1, max = 20, step = 0.5),
numericInput("pt_size_merge", "Points size:", value = 0.1, min = 0.01, max = 5, step = 0.1),
checkboxInput("show_cluster_labels", "Show cluster labels", value = TRUE)
),
column(width = 4,
selectInput("select_color_merge", "Select the cluster to be modified:", choices = NULL),
colourInput("select_cluster_merge_color", "Choose a new color for the cluster:", value = "red"),
actionButton("update_colour_merge_button", "Update cluster color")
)
),
plotlyOutput("umap_finale_merge"),
selectInput("plot_type_select_merge", "Select Plot Type:",  choices = c("FeaturePlot", "VlnPlot", "DotPlot", "RidgePlot")),
plotOutput("selected_plot_display_merge")
),
############################## Multiple/Calculation of differentially expressed genes ##############################
tabItem(
tabName = "combined_analysis",
plotOutput("filtered_umap_plot"),
fluidRow(
column(width = 3,
br(),
uiOutput("dataset_filter_ui")
),
column(width = 3,
br(),
numericInput("filtered_umap_plot_dpi", "Resolution", value = 300, min = 72, step = 72)
),
column(width = 3,
br(),
br(),
checkboxInput("show_labels_merge", "Show labels", value = TRUE)          ),
column(width = 3,
br(),
br(),
downloadButton("download_filtered_umap_plot", "Download UMAP plot")
)),
box(  title = "Compares one cluster with all others", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
column(width = 4,
selectInput("selected_cluster", label = "Select a cluster for comparison", choices = NULL),
actionButton("calculate_DE", "Start analysis")
),
column(width = 4,
numericInput("logfc_threshold_merge", label = "Log2 Fold Change threshold:", value = 0.25),
downloadButton('download_markers_single_cluster_merge', 'Download differentially expressed genes')
),
column(width = 4,
numericInput("min_pct_merge", "Percentage threshold:", value = 0.01, min = 0, max = 1, step = 0.01)
),
DTOutput('DE_genes_table')
),
box(  title = "Compares one cluster with one other cluster", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
column(width = 4,
uiOutput("cluster1_compare_ui"),
numericInput("min_pct_compare_merge", "Percentage threshold:", value = 0.01, min = 0, max = 1, step = 0.01),
),
column(width = 4,
uiOutput("cluster2_compare_ui"),
actionButton("compare_clusters_button", "Start analysis between those Clusters")
),
column(width = 4,
numericInput("logfc_threshold_compare_merge", label = "Log2 Fold Change threshold:", value = 0.25),
downloadButton('download_markers_multiple_clusters_merge', 'Download differentially expressed genes')
),
DTOutput("diff_genes_table_compare")
),
box(title = "Compares a cluster between two datasets ", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
column(width = 4,
uiOutput("dataset1_compare_ui"),
numericInput("logfc_threshold_datasets", label = "Log2 Fold Change threshold:", value = 0.25),
actionButton("compare_datasets_button", "start analysis  between those datasets")
),
column(width = 4,
uiOutput("dataset2_compare_ui"),
numericInput("min_pct_compare_dataset_merge", "Percentage threshold:", value = 0.01, min = 0, max = 1, step = 0.01),
checkboxInput("all_clusters", "Compare all clusters", value = FALSE)
),
column(width = 4,
uiOutput("cluster_compare_ui"),
downloadButton("download_diff_dataset_cluster", "Download differentially expressed genes")
),
DTOutput("diff_dataset_cluster")
),
box(title = "Compares a cluster between two datasets ", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
actionButton("generate_cluster_table", "Generate Cluster Table"),
DTOutput("cluster_table")
),
),
############################## Multiple/Subseting seurat object ##############################
tabItem(
tabName = "subset_merge",
plotOutput("global_umap_merge"),
box(title = "Subset by clusters", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
selectInput("select_ident_subset_merge", "Select the clusters to include:", choices = NULL, multiple = TRUE),
actionButton("apply_subset_merge", "Apply Cluster-based subset")
),
box(title = "Subset by genes expressions", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
textInput("gene_list_merge", "Enter Gene Names (comma-separated)", value = ""),
numericInput("expression_threshold_merge", "Expression Threshold", value = 1, min = 0),
numericInput("num_genes_to_express_merge", "Number of genes to be expressed from the list:", value = 1, min = 1),
actionButton("apply_gene_subset_merge", "Apply Gene-based Subset")
),
plotOutput("subset_umap_merge"),
downloadButton("download_subset_merge", "Save subset as .RDS")
),
############################## Trajectory/Monocle Conversion and trajectory ##############################
tabItem(
tabName = "trajectory",
fluidRow(
box(title = "Options", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 14,
column(6,
fileInput('load_seurat_file_monocle', 'Choose Seurat file'),
actionButton("convertToMonocle", "Convert to Monocle"),
actionButton("constructGraph", "Construct Graph"),
),
column(6,
numericInput("cluster_k", "Number of clusters (k):", value = 5, min = 1, step = 1),
verbatimTextOutput("selected_root_cell"),
actionButton("startRootSelection", "Select root cell")
)),
plotlyOutput("trajectoryPlot"),
plotOutput("pseudotimePlot")
))
,
############################## Trajectory/Differential expressed genes along the trajectory ##############################
tabItem(
tabName = "genes_pseudotime",
titlePanel("Analysis of Genes Over Pseudotime"),
fluidRow(
box(title = "Options", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
column(6,
actionButton("run_diff_gene_pseudotime", "Run Differential Gene Test"),
),
column(6,
downloadButton('download_pseudotime_diff_genes', 'Download Differential Genes CSV')
),
DTOutput("diffGeneTable"),
),
box(title = "Options", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12, height = 650,
column(6,
pickerInput("gene_picker", "Select Genes",  choices = NULL, multiple = TRUE, options = list(`actions-box` = TRUE, `live-search` = TRUE)),
actionButton("visualize_gene_trajectory", "Visualize Gene Trajectory"),
),
column(6,
downloadButton("download_trajectory_plot", "Download Gene Trajectory Plot"),
numericInput("dpi_selection", "Select DPI for Download", value = 300, min = 72, max = 1200)
),
plotOutput("geneTrajectoryPlot")
),
)
)
,
############################## NicheNet UI ##############################
# UI compl√®te de l'onglet NicheNet avec introduction et explication
tabItem(
tabName = "nichenet_load_and_define",
fluidRow(
box(title = "What is NicheNet?", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 12,
p("NicheNet is a computational method that allows you to infer which ligands,
secreted by interacting cells (senders), have influenced the gene expression
changes observed in target cells (receivers). This method uses ligand-receptor networks
to predict which ligands are likely responsible for inducing specific gene expression programs
in the receiving cell population."),
p("To run a NicheNet analysis, you will need:"),
tags$ul(
tags$li("A Seurat object containing your single-cell RNA-seq data."),
tags$li("A ligand-receptor network file for ",
a("Human", href = "https://zenodo.org/record/10229222", target = "_blank"),
" or ",
a("Mouse", href = "https://zenodo.org/record/10229222/files/lr_network_mouse_allInfo_30112033.rds", target = "_blank")),
tags$li(a("A ligand-target matrix file", href = "https://zenodo.org/record/7074291/files/ligand_target_matrix_nsga2r_final.rds", target = "_blank")),
tags$li(a("Weighted networks file for ligand-receptor interactions", href = "https://zenodo.org/record/7074291", target = "_blank"))
),
p("You can download these resources from the links above."),
# Centered button for data loading
div(style = "text-align: center; margin-top: 20px;",  # Style for centering
actionButton("open_modal_nichenet", "Open Data Loading Menu", icon = icon("upload")),
verbatimTextOutput("load_data_status_nichenet")
)
)
)
,
fluidRow(
div(class = "m-3",
box(title = "Step 2: Define Sender and Receiver", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 6,
p("In this section, you will select the metadata column that contains cell type identities.
Then, choose which cell population is the 'Sender' (the cells secreting ligands) and which is the 'Receiver'
(the cells responding to ligands)."),
selectInput("cell_identity_column", "Select Cell Identity Column", choices = NULL),
selectizeInput("sender_select", "Select Sender(s)", choices = NULL, multiple = TRUE),
selectizeInput("receiver_select", "Select Receiver(s)", choices = NULL, multiple = TRUE)
)
),
div(class = "m-3",
box(title = "Select Condition Parameters", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 6,
p("In this section, choose the column that contains experimental conditions (e.g., treatment vs control),
and then select the condition of interest and its reference (baseline or control condition)."),
selectInput("condition_column", "Select Condition Column", choices = NULL),
selectInput("condition_oi_select", "Condition of Interest", choices = NULL),
selectInput("condition_reference_select", "Condition Reference", choices = NULL),
actionButton("run_nichenet", "Run NicheNet Analysis")
)
)
)
)
,
############################## NicheNet Results UI ##############################
tabItem(
tabName = "nichenet_run_and_view",
fluidRow(
box(title = "NicheNet Results", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
selectInput("nichenet_output_type", "Select Output Type",
choices = c("Ligand Activities" = "ligand_activities",
"Top Ligands" = "top_ligands",
"Top Targets" = "top_targets",
"Ligand Expression Dotplot" = "ligand_expression_dotplot",
"Ligand Differential Expression Heatmap" = "ligand_differential_expression_heatmap",
"Ligand Target Heatmap" = "ligand_target_heatmap",
"Ligand Receptor Heatmap" = "ligand_receptor_heatmap",
"Ligand-Target Matrix" = "ligand_target_matrix",
"Ligand-Target Dataframe" = "ligand_target_df")),
actionButton("view_nichenet_results", "View Results"),
h3("Selected Output"),
uiOutput("nichenet_output_display"),
),
)
)
,
############################## Circos Plot UI ##############################
tabItem(
tabName = "circos_plot",
fluidRow(
box(title = "Circos Plot Overview", status = "info", solidHeader = TRUE, collapsible = TRUE, width = 12,
p("The Circos plot visualizes the interactions between ligands and their target genes, showing which ligands from different sender cell types affect specific targets."),
p("Follow the steps below to configure the Circos plot:")
)
),
fluidRow(
box(title = "Step 1: Assign Ligands to Sender Cells", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 6,
p("Assign ligands to sender cell types based on their expression levels. Adjust the function for assignment using the standard deviation multiplier."),
actionButton("assign_ligands", "Assign Ligands", icon = icon("tasks"))
),
box(title = "Step 2: Define Ligand-Target Links", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 6,
p("Define the ligand-target links using the specified target type and a cutoff for interaction strength."),
textInput("target_type", "Target Type (e.g., LCMV-DE):", value = "LCMV-DE"),
numericInput("link_cutoff", "Link Cutoff (0 - 1):", value = 0.4, min = 0, max = 1, step = 0.05),
actionButton("define_links", "Define Links", icon = icon("link"))
)
),
fluidRow(
box(title = "Step 3: Customize Colors", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
p("Choose colors for the different sender cell types and the selected target type for better visualization."),
uiOutput("ligand_color_inputs"),  # Dynamic inputs for sender colors
uiOutput("target_color_inputs")   # Dynamic input for target color
)
),
fluidRow(
box(title = "Step 4: Generate Circos Plot", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
p("Generate the Circos plot based on the selected parameters. Adjust transparency for the links if needed."),
checkboxInput("transparency_circos", label = "Enable transparency for links", value = FALSE),
actionButton("draw_circos_plot", "Draw Circos Plot", icon = icon("chart-pie")),
plotOutput("circos_plot_output", height = "600px")  # Placeholder for the generated plot
)
)
)
,
############################## MultinicheNet/Load and Define Parameters ##############################
tabItem(
tabName = "multinichenet_load_and_define",
fluidRow(
box(title = "Step 1: Load Data", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
actionButton("open_modal", "Open Data Loading Menu", icon = icon("upload")),
verbatimTextOutput("load_data_status")
),
h3("Step 2: Define Parameters"),
fluidRow(
box(title = "Define Metadata Parameters", status = "primary", solidHeader = TRUE, collapsible = TRUE,
column(6, selectInput("sample_id", "Select Sample ID", choices = NULL),
selectInput("group_id", "Select Group ID", choices = NULL),
selectInput("celltype_id", "Select Cell Type ID", choices = NULL)),
column(6, actionButton("define_params", "Set Metadata Parameters"))
),
box(title = "Define Contrast", status = "primary", solidHeader = TRUE, collapsible = TRUE,
column(6, uiOutput("group_select_ui"),
actionButton("save_contrast", "Set Contrast")),
column(6, h4("Generated Contrast Formula"),
textOutput("generated_contrast_formula"))
),
)
)
),
############################## MultiNicheNet/Run and View Results ##############################
tabItem(
tabName = "multinichenet_run_and_view",
fluidRow(
box(
title = "Step 2: Set Analysis Parameters", status = "primary", solidHeader = TRUE, collapsible = TRUE, width = 12,
column(6,
numericInput("min_sample_prop", "Minimum sample proportion for gene expression", value = 0.50, step = 0.01, min = 0),
numericInput("fraction_cutoff", "Fraction cutoff for gene expression", value = 0.05, step = 0.01, min = 0),
numericInput("logFC_threshold", "LogFC threshold", value = 0.50, step = 0.01, min = 0),
numericInput("p_val_threshold", "P-value threshold", value = 0.05, step = 0.01, min = 0),
actionButton("calculate_abundance_info", "Calculate Abundance Info"),  # Nouveau bouton pour abundance_info
actionButton("calculate_frq_list", "Calculate Fraction Expression List"),
actionButton("run_abundance_expression_info", "Run Abundance & Expression Info"),
),
column(6,
checkboxInput("empirical_pval", "Use empirical p-values?", value = FALSE),
checkboxInput("p_val_adj", "Adjust p-values for multiple testing?", value = FALSE),
numericInput("top_n_target", "Top N target genes per ligand", value = 250, min = 1),
numericInput("n_cores", "Number of cores for parallel processing", value = 8, min = 1),
numericInput("min_cells", "Minimul cells", value =10, min = 1),
actionButton("run_DE_analysis", "Run DE Analysis"),
actionButton("run_MultiNicheNet_analysis", "Run MultiNicheNet Analysis")
)
))
),
############################## Acknowlegment and Licence ##############################
tabItem(
tabName = "acknowledgement",
fluidPage( tags$div(style = "position:relative; width:630px; height:800px;",
tags$img(src = "muscle.png",
style = "position:absolute; top:0; left:0; width:100%; height:100%;"),
tags$div("Acknowledgement & License",
style = "position:absolute; top:5%; left:30%; color:white; font-size:30px;"),
tags$div("This application was developed by Gaspard Macaux and is the property of the Neuromuscular Development, Genetics and Physiopathology laboratory directed by Dr. Pascal Maire.",
style = "position:absolute; top:20%; left:4%; color:white; font-size:20px;"),
tags$div("Many thanks to Edgar Jauliac, L√©a Delivry and Hugues Escoffier for their advices and expertise in transcriptomic analysis",
style = "position:absolute; top:35%; left:4%; color:white; font-size:20px;"),
tags$div("Many thanks to Maxime Di Gallo and Benoit Viollet for testing the app",
style = "position:absolute; top:35%; left:4%; color:white; font-size:20px;"),
tags$div("Many thanks to Seurat, who has built a very useful and well-documented library.",
style = "position:absolute; top:45%; left:4%; color:white; font-size:20px;"),
tags$div("Many thankd to Shiny, which makes it so easy to develop graphical user interfaces.",
style = "position:absolute; top:55%; left:4%; color:white; font-size:20px;"),
tags$div("Many thanks to Rstudio.",
style = "position:absolute; top:65%; left:4%; color:white; font-size:20px;"),
tags$div("This application is licensed under the GPL3.",
style = "position:absolute; top:75%; left:4%; color:white; font-size:20px;"),
),
))
)
, tags$script(HTML('$(function () { $("[data-toggle=\'popover\']").popover(); });')))
)
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
# Debugging print
print("DE output structure:")
print(str(data$de_output))
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
# install.packages("devtools")
devtools::install_github("immunogenomics/harmony")
# Installation directe via CRAN
install.packages("harmony")
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
runApp('Desktop/App_split/App_split_prod/Code/main_server.R')
