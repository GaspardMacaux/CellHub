runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
# Appliquer le seuil pour considérer un gène comme exprimé
expressed_indices <- gene_data > input$logfc_threshold
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
.libPaths()
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
# Installer les packages nécessaires
install.packages("shiny")
install.packages("readxl")
install.packages("dplyr")
install.packages("purrr")
install.packages("openxlsx")
# Charger les packages
library(shiny)
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
# Fonction pour charger et traiter un fichier Excel tout en préservant les couleurs
process_file_with_style <- function(file_path, cell_type, sheet_name) {
# Lire le fichier Excel avec readxl pour récupérer les données
df <- read_excel(file_path, sheet = sheet_name)
# Sélectionner les colonnes d'intérêt
df_selected <- df %>%
select(`Upstream Regulator`, `Expr Log Ratio`, `p-value of overlap`, `Activation z-score`) %>%
mutate(across(everything(), as.character))
# Renommer les colonnes en ajoutant le type cellulaire
colnames(df_selected) <- c("Upstream Regulator",
paste(cell_type, "Expr Log Ratio", sep = "_"),
paste(cell_type, "p-value of overlap", sep = "_"),
paste(cell_type, "Activation z-score", sep = "_"))
return(df_selected)
}
# Appliquer des styles conditionnels aux cellules
apply_styles <- function(wb, sheet, df) {
for (col in grep("Activation z-score|Expr Log Ratio", colnames(df), value = TRUE)) {
for (row in 2:(nrow(df) + 1)) {
value <- as.numeric(df[[col]][row - 1])
if (!is.na(value)) {
if (value < -2) {
addStyle(wb, sheet = sheet, style = createStyle(fgFill = "blue", fontColour = "white"), rows = row, cols = which(colnames(df) == col), gridExpand = TRUE)
} else if (value > 2) {
addStyle(wb, sheet = sheet, style = createStyle(fgFill = "orange", fontColour = "white"), rows = row, cols = which(colnames(df) == col), gridExpand = TRUE)
}
}
}
}
}
# Interface utilisateur
ui <- fluidPage(
titlePanel("Fusionner des fichiers Excel"),
sidebarLayout(
sidebarPanel(
numericInput("num_files", "Nombre de fichiers Excel:", value = 1, min = 1),
textInput("sheet_name", "Nom de la feuille:"),
textInput("merge_column", "Nom de la colonne pour la fusion:"),
uiOutput("file_inputs"),
actionButton("merge_files", "Fusionner les fichiers"),
downloadButton("downloadData", "Télécharger le fichier fusionné")
),
mainPanel(
textOutput("status")
)
)
)
# Serveur
server <- function(input, output, session) {
output$file_inputs <- renderUI({
num_files <- input$num_files
fileInputs <- lapply(1:num_files, function(i) {
fileInput(paste0("file", i), paste("Choisir le fichier Excel ", i))
})
cellTypeInputs <- lapply(1:num_files, function(i) {
textInput(paste0("cell_type", i), paste("Type cellulaire ", i))
})
tagList(fileInputs, cellTypeInputs)
})
observeEvent(input$merge_files, {
req(input$sheet_name, input$merge_column)
files <- lapply(1:input$num_files, function(i) {
input[[paste0("file", i)]]
})
cell_types <- lapply(1:input$num_files, function(i) {
input[[paste0("cell_type", i)]]
})
processed_files <- map2(files, cell_types, ~{
if (!is.null(.x) && file.exists(.x$datapath)) {
return(process_file_with_style(.x$datapath, .y, input$sheet_name))
} else {
warning(paste("File not found:", .x$datapath))
return(NULL)
}
})
processed_files <- processed_files[!sapply(processed_files, is.null)]
if (length(processed_files) == 0) {
output$status <- renderText("Aucun fichier valide n'a été trouvé.")
return(NULL)
}
final_df <- reduce(processed_files, left_join, by = "Upstream Regulator")
# Mettre à jour le nom de la première colonne
colnames(final_df)[1] <- input$merge_column
wb <- createWorkbook()
addWorksheet(wb, "Merged Data")
writeData(wb, sheet = 1, x = final_df)
apply_styles(wb, "Merged Data", final_df)
output_file <- tempfile(fileext = ".xlsx")
saveWorkbook(wb, output_file, overwrite = TRUE)
output$status <- renderText("Les fichiers ont été fusionnés avec succès.")
output$downloadData <- downloadHandler(
filename = function() {
paste("merged_data", Sys.Date(), ".xlsx", sep = "")
},
content = function(file) {
file.copy(output_file, file)
}
)
})
}
# Lancer l'application Shiny
shinyApp(ui = ui, server = server)
# Charger les packages nécessaires
library(shiny)
library(readxl)
library(dplyr)
library(purrr)
library(openxlsx)
# Fonction pour charger et traiter un fichier Excel tout en préservant les couleurs
process_file_with_style <- function(file_path, cell_type, sheet_name) {
# Lire le fichier Excel avec readxl pour récupérer les données
df <- read_excel(file_path, sheet = sheet_name)
# Sélectionner les colonnes d'intérêt
df_selected <- df %>%
select(`Upstream Regulator`, `Expr Log Ratio`, `p-value of overlap`, `Activation z-score`) %>%
mutate(across(everything(), as.character))
# Renommer les colonnes en ajoutant le type cellulaire
colnames(df_selected) <- c("Upstream Regulator",
paste(cell_type, "Expr Log Ratio", sep = "_"),
paste(cell_type, "p-value of overlap", sep = "_"),
paste(cell_type, "Activation z-score", sep = "_"))
return(df_selected)
}
# Appliquer des styles conditionnels aux cellules
apply_styles <- function(wb, sheet, df) {
for (col in grep("Activation z-score|Expr Log Ratio", colnames(df), value = TRUE)) {
for (row in 2:(nrow(df) + 1)) {
value <- as.numeric(df[[col]][row - 1])
if (!is.na(value)) {
if (value < -2) {
addStyle(wb, sheet = sheet, style = createStyle(fgFill = "blue", fontColour = "white"), rows = row, cols = which(colnames(df) == col), gridExpand = TRUE)
} else if (value > 2) {
addStyle(wb, sheet = sheet, style = createStyle(fgFill = "orange", fontColour = "white"), rows = row, cols = which(colnames(df) == col), gridExpand = TRUE)
}
}
}
}
}
# Interface utilisateur
ui <- fluidPage(
titlePanel("Fusionner des fichiers Excel"),
sidebarLayout(
sidebarPanel(
numericInput("num_files", "Nombre de fichiers Excel:", value = 1, min = 1),
textInput("sheet_name", "Nom de la feuille:"),
textInput("merge_column", "Nom de la colonne pour la fusion:"),
uiOutput("file_inputs"),
actionButton("merge_files", "Fusionner les fichiers"),
downloadButton("downloadData", "Télécharger le fichier fusionné")
),
mainPanel(
textOutput("status")
)
)
)
# Serveur
server <- function(input, output, session) {
output$file_inputs <- renderUI({
num_files <- input$num_files
fileInputs <- lapply(1:num_files, function(i) {
fileInput(paste0("file", i), paste("Choisir le fichier Excel ", i))
})
cellTypeInputs <- lapply(1:num_files, function(i) {
textInput(paste0("cell_type", i), paste("Type cellulaire ", i))
})
tagList(fileInputs, cellTypeInputs)
})
merged_data <- reactiveVal(NULL)
observeEvent(input$merge_files, {
req(input$sheet_name, input$merge_column)
files <- lapply(1:input$num_files, function(i) {
input[[paste0("file", i)]]
})
cell_types <- lapply(1:input$num_files, function(i) {
input[[paste0("cell_type", i)]]
})
processed_files <- map2(files, cell_types, ~{
if (!is.null(.x) && file.exists(.x$datapath)) {
return(process_file_with_style(.x$datapath, .y, input$sheet_name))
} else {
warning(paste("File not found:", .x$datapath))
return(NULL)
}
})
processed_files <- processed_files[!sapply(processed_files, is.null)]
if (length(processed_files) == 0) {
output$status <- renderText("Aucun fichier valide n'a été trouvé.")
return(NULL)
}
final_df <- reduce(processed_files, left_join, by = "Upstream Regulator")
# Mettre à jour le nom de la première colonne
colnames(final_df)[1] <- input$merge_column
wb <- createWorkbook()
addWorksheet(wb, "Merged Data")
writeData(wb, sheet = 1, x = final_df)
apply_styles(wb, "Merged Data", final_df)
merged_data(list(data = final_df, workbook = wb))
output$status <- renderText("Les fichiers ont été fusionnés avec succès.")
})
output$downloadData <- downloadHandler(
filename = function() {
paste("merged_data", Sys.Date(), ".xlsx", sep = "")
},
content = function(file) {
req(merged_data())
saveWorkbook(merged_data()$workbook, file, overwrite = TRUE)
}
)
}
# Lancer l'application Shiny
shinyApp(ui = ui, server = server)
library(shiny); runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
runApp('Desktop/tableau.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
# Fonction pour nettoyer l'espace de travail
cleanWorkspaceSingleDataset <- function() {
# Nettoyage des objets réactifs
single_dataset_object(NULL)
gene_list$features <- NULL
subset_seurat(NULL)
clustering_plot(NULL)
feature_plot(NULL)
vln_plot(NULL)
dot_plot(NULL)
ridge_plot(NULL)
heatmap_plot(NULL)
scatter_plot(NULL)
# Suppression des dossiers si existants
if (dir.exists("tempdir")) {
unlink("tempdir", recursive = TRUE, force = TRUE)
message("Deleted tempdir.")
}
if (dir.exists("dataDir")) {
unlink("dataDir", recursive = TRUE, force = TRUE)
message("Deleted dataDir.")
}
# Suppression de tous les dossiers commençant par "unzipped"
unzipped_dirs <- list.dirs(path = ".", full.names = TRUE, recursive = FALSE)
unzipped_dirs <- unzipped_dirs[grepl("unzipped", unzipped_dirs)]
if (length(unzipped_dirs) > 0) {
sapply(unzipped_dirs, unlink, recursive = TRUE, force = TRUE)
message("Deleted unzipped directories.")
}
gc()  # Garbage collection
message("Workspace cleaned.")
}
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
library(shiny); runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
runApp('Desktop/App_split/App_split_prod/main_server.R')
